risk_2004 <- model_2004$samples$fitted / matrix(rep(sp.dat@data$E2004, nrow(model_2004$samples$fitted)), nrow = m, byrow = TRUE)
# Inference from the model for 2004
# Estimated relative risks and 95% credible intervals
exp(model_2004$summary.results[, c("Mean", "2.5%", "97.5%")])
# Calculate and map risk for 2004
sp.dat@data$risk_2004 <- model_2004$fitted.values / sp.dat@data$E2004
colours_risk_2004 <- colorNumeric(palette = "YlOrRd", domain = sp.dat@data$risk_2004)
leaflet(data = sp.dat) %>%
addTiles() %>%
addPolygons(fillColor = ~colours_risk_2004(risk_2004),
color = "", weight = 1,
fillOpacity = 0.7) %>%
addLegend(pal = colours_risk_2004, values = sp.dat@data$risk_2004,
opacity = 1, title = "Risk 2004") %>%
addScaleBar(position = "bottomleft")
# Calculate and map Posterior Exceedance Probability (PEP) for 2004
m <- nrow(model_2004$samples$fitted)
risk_2004 <- model_2004$samples$fitted / matrix(rep(sp.dat@data$E2004, nrow(model_2004$samples$fitted)), nrow = m, byrow = TRUE)
sp.dat@data$PEP_2004 <- as.numeric(summarise.exceedences(risk_2004, 1))
# Inference from the model for 2004
# Estimated relative risks and 95% credible intervals
exp(model_2004$summary.results[, c("Mean", "2.5%", "97.5%")])
# Calculate and map risk for 2004
sp.dat@data$risk_2004 <- model_2004$fitted.values / sp.dat@data$E2004
colours_risk_2004 <- colorNumeric(palette = "YlOrRd", domain = sp.dat@data$risk_2004)
leaflet(data = sp.dat) %>%
addTiles() %>%
addPolygons(fillColor = ~colours_risk_2004(risk_2004),
color = "", weight = 1,
fillOpacity = 0.7) %>%
addLegend(pal = colours_risk_2004, values = sp.dat@data$risk_2004,
opacity = 1, title = "Risk 2004") %>%
addScaleBar(position = "bottomleft")
# Calculate and map Posterior Exceedance Probability (PEP) for 2004
m <- nrow(model_2004$samples$fitted)
risk_2004 <- model_2004$samples$fitted / matrix(rep(sp.dat@data$E2004, nrow(model_2004$samples$fitted)), nrow = m, byrow = TRUE)
sp.dat@data$PEP_2004 <- as.numeric(summarise.exceedances(risk_2004, 1))
# Inference from the model for 2004
# Estimated relative risks and 95% credible intervals
exp(model_2004$summary.results[, c("Mean", "2.5%", "97.5%")])
# Calculate and map risk for 2004
sp.dat@data$risk_2004 <- model_2004$fitted.values / sp.dat@data$E2004
colours_risk_2004 <- colorNumeric(palette = "YlOrRd", domain = sp.dat@data$risk_2004)
leaflet(data = sp.dat) %>%
addTiles() %>%
addPolygons(fillColor = ~colours_risk_2004(risk_2004),
color = "", weight = 1,
fillOpacity = 0.7) %>%
addLegend(pal = colours_risk_2004, values = sp.dat@data$risk_2004,
opacity = 1, title = "Risk 2004") %>%
addScaleBar(position = "bottomleft")
# Calculate and map Posterior Exceedance Probability (PEP) for 2004
m <- nrow(model_2004$samples$fitted)
risk_2004 <- model_2004$samples$fitted / matrix(rep(sp.dat@data$E2004, nrow(model_2004$samples$fitted)), nrow = m, byrow = TRUE)
summarise.exceedences<-function(samples,exceedences)
{
exceed.vec<-apply((samples>exceedences),2,sum)/nrow(samples)
9
return(exceed.vec)
}
sp.dat@data$PEP_2004 <- as.numeric(summarise.exceedances(risk_2004, 1))
# Inference from the model for 2004
# Estimated relative risks and 95% credible intervals
exp(model_2004$summary.results[, c("Mean", "2.5%", "97.5%")])
# Calculate and map risk for 2004
sp.dat@data$risk_2004 <- model_2004$fitted.values / sp.dat@data$E2004
colours_risk_2004 <- colorNumeric(palette = "YlOrRd", domain = sp.dat@data$risk_2004)
leaflet(data = sp.dat) %>%
addTiles() %>%
addPolygons(fillColor = ~colours_risk_2004(risk_2004),
color = "", weight = 1,
fillOpacity = 0.7) %>%
addLegend(pal = colours_risk_2004, values = sp.dat@data$risk_2004,
opacity = 1, title = "Risk 2004") %>%
addScaleBar(position = "bottomleft")
# Calculate and map Posterior Exceedance Probability (PEP) for 2004
m <- nrow(model_2004$samples$fitted)
risk_2004 <- model_2004$samples$fitted / matrix(rep(sp.dat@data$E2004, nrow(model_2004$samples$fitted)), nrow = m, byrow = TRUE)
summarise.exceedences<-function(samples,exceedences)
{
exceed.vec<-apply((samples>exceedences),2,sum)/nrow(samples)
9
return(exceed.vec)
}
sp.dat@data$PEP_2004 <- as.numeric(summarise.exceedences(risk_2004, 1))
colours_pep_2004 <- colorNumeric(palette = "YlOrRd", domain = sp.dat@data$PEP_2004)
leaflet(data = sp.dat) %>%
addTiles() %>%
addPolygons(fillColor = ~colours_pep_2004(PEP_2004),
color = "", weight = 1,
fillOpacity = 0.7) %>%
addLegend(pal = colours_pep_2004, values = sp.dat@data$PEP_2004,
opacity = 1, title = "PEP 2004") %>%
addScaleBar(position = "bottomleft")
# Inference from the model for 2004
# Estimated relative risks and 95% credible intervals
exp(model_2004$summary.results[, c("Mean", "2.5%", "97.5%")])
# Calculate and map risk for 2004
sp.dat@data$risk_2004 <- model_2004$fitted.values / sp.dat@data$E2004
colours_risk_2004 <- colorNumeric(palette = "YlOrRd", domain = sp.dat@data$risk_2004)
leaflet(data = sp.dat) %>%
addTiles() %>%
addPolygons(fillColor = ~colours_risk_2004(risk_2004),
color = "", weight = 1,
fillOpacity = 0.7) %>%
addLegend(pal = colours_risk_2004, values = sp.dat@data$risk_2004,
opacity = 1, title = "Risk 2004") %>%
addScaleBar(position = "bottomleft")
# Calculate and map Posterior Exceedance Probability (PEP) for 2004
m <- nrow(model_2004$samples$fitted)
risk_2004 <- model_2004$samples$fitted / matrix(rep(sp.dat@data$E2004, nrow(model_2004$samples$fitted)), nrow = m, byrow = TRUE)
summarise.exceedences<-function(samples,exceedences)
{
exceed.vec<-apply((samples>exceedences),2,sum)/nrow(samples)
9
return(exceed.vec)
}
sp.dat@data$PEP_2004 <- as.numeric(summarise.exceedences(risk_2004, 1))
colours_pep_2004 <- colorNumeric(palette = "YlOrRd", domain = sp.dat@data$PEP_2004)
leaflet(data = sp.dat) %>%
addTiles() %>%
addPolygons(fillColor = ~colours_pep_2004(PEP_2004),
color = "black", weight = 1,
fillOpacity = 0.7,
fillPattern= "solid") %>%
addLegend(pal = colours_pep_2004, values = sp.dat@data$PEP_2004,
opacity = 1, title = "PEP 2004") %>%
addScaleBar(position = "bottomleft")
# Inference from the model for 2004
# Estimated relative risks and 95% credible intervals
exp(model_2004$summary.results[, c("Mean", "2.5%", "97.5%")])
# Calculate and map risk for 2004
sp.dat@data$risk_2004 <- model_2004$fitted.values / sp.dat@data$E2004
colours_risk_2004 <- colorNumeric(palette = "YlOrRd", domain = sp.dat@data$risk_2004)
leaflet(data = sp.dat) %>%
addTiles() %>%
addPolygons(fillColor = ~colours_risk_2004(risk_2004),
color = "", weight = 1,
fillOpacity = 0.7) %>%
addLegend(pal = colours_risk_2004, values = sp.dat@data$risk_2004,
opacity = 1, title = "Risk 2004") %>%
addScaleBar(position = "bottomleft")
# Calculate and map Posterior Exceedance Probability (PEP) for 2004
m <- nrow(model_2004$samples$fitted)
risk_2004 <- model_2004$samples$fitted / matrix(rep(sp.dat@data$E2004, nrow(model_2004$samples$fitted)), nrow = m, byrow = TRUE)
summarise.exceedences<-function(samples,exceedences)
{
exceed.vec<-apply((samples>exceedences),2,sum)/nrow(samples)
9
return(exceed.vec)
}
sp.dat@data$PEP_2004 <- as.numeric(summarise.exceedences(risk_2004, 1))
colours_pep_2004 <- colorNumeric(palette = "YlOrRd", domain = sp.dat@data$PEP_2004)
leaflet(data = sp.dat) %>%
addTiles() %>%
addPolygons(fillColor = ~colours_pep_2004(PEP_2004),
color = "black", weight = 1,
fillOpacity = 0.7,
fill= "solid") %>%
addLegend(pal = colours_pep_2004, values = sp.dat@data$PEP_2004,
opacity = 1, title = "PEP 2004") %>%
addScaleBar(position = "bottomleft")
# Inference from the model for 2004
# Estimated relative risks and 95% credible intervals
exp(model_2004$summary.results[, c("Mean", "2.5%", "97.5%")])
# Calculate and map risk for 2004
sp.dat@data$risk_2004 <- model_2004$fitted.values / sp.dat@data$E2004
colours_risk_2004 <- colorNumeric(palette = "YlOrRd", domain = sp.dat@data$risk_2004)
leaflet(data = sp.dat) %>%
addTiles() %>%
addPolygons(fillColor = ~colours_risk_2004(risk_2004),
color = "", weight = 1,
fillOpacity = 0.7) %>%
addLegend(pal = colours_risk_2004, values = sp.dat@data$risk_2004,
opacity = 1, title = "Risk 2004") %>%
addScaleBar(position = "bottomleft")
# Calculate and map Posterior Exceedance Probability (PEP) for 2004
m <- nrow(model_2004$samples$fitted)
risk_2004 <- model_2004$samples$fitted / matrix(rep(sp.dat@data$E2004, nrow(model_2004$samples$fitted)), nrow = m, byrow = TRUE)
summarise.exceedences<-function(samples,exceedences)
{
exceed.vec<-apply((samples>exceedences),2,sum)/nrow(samples)
9
return(exceed.vec)
}
sp.dat@data$PEP_2004 <- as.numeric(summarise.exceedences(risk_2004, 1))
colours_pep_2004 <- colorNumeric(palette = "YlOrRd", domain = sp.dat@data$PEP_2004)
leaflet(data = sp.dat) %>%
addTiles() %>%
addPolygons(fillColor = ~colours_pep_2004(PEP_2004),
color = "black", weight = 1,
fillOpacity = 0.7,
fillPattern= "solid") %>%
addLegend(pal = colours_pep_2004, values = sp.dat@data$PEP_2004,
opacity = 1, title = "PEP 2004") %>%
addScaleBar(position = "bottomleft")
# Inference from the model for 2004
# Estimated relative risks and 95% credible intervals
exp(model_2004$summary.results[, c("Mean", "2.5%", "97.5%")])
# Calculate and map risk for 2004
sp.dat@data$risk_2004 <- model_2004$fitted.values / sp.dat@data$E2004
colours_risk_2004 <- colorNumeric(palette = "YlOrRd", domain = sp.dat@data$risk_2004)
leaflet(data = sp.dat) %>%
addTiles() %>%
addPolygons(fillColor = ~colours_risk_2004(risk_2004),
color = "", weight = 1,
fillOpacity = 0.7) %>%
addLegend(pal = colours_risk_2004, values = sp.dat@data$risk_2004,
opacity = 1, title = "Risk 2004") %>%
addScaleBar(position = "bottomleft")
# Calculate and map Posterior Exceedance Probability (PEP) for 2004
m <- nrow(model_2004$samples$fitted)
risk_2004 <- model_2004$samples$fitted / matrix(rep(sp.dat@data$E2004, nrow(model_2004$samples$fitted)), nrow = m, byrow = TRUE)
summarise.exceedences<-function(samples,exceedences)
{
exceed.vec<-apply((samples>exceedences),2,sum)/nrow(samples)
9
return(exceed.vec)
}
sp.dat@data$PEP_2004 <- as.numeric(summarise.exceedences(risk_2004, 1))
colours_pep_2004 <- colorNumeric(palette = "YlOrRd", domain = sp.dat@data$PEP_2004)
leaflet(data = sp.dat) %>%
addTiles() %>%
addPolygons(fillColor = ~colours_pep_2004(PEP_2004),
color = "black", weight = 1,
fillOpacity = 0.7, fillPattern= "solid") %>%
addLegend(pal = colours_pep_2004, values = sp.dat@data$PEP_2004,
opacity = 1, title = "PEP 2004") %>%
addScaleBar(position = "bottomleft")
knitr::opts_chunk$set(echo = TRUE)
# Fitting the spatial correlation model for 2004
model_2004 <- S.CARleroux(formula = formula1, family = "poisson", data = sf.dat, W = W,
burnin = 10000, n.sample = 100000, thin = 10, verbose = FALSE)
knitr::opts_chunk$set(echo = TRUE)
##Loading and reading packages if its required
if(!require(sf)){install.packages("sf")}
if(!require(sp)){install.packages("sp")}
if(!require(spdep)){install.packages("spdep")}
if(!require(satellite)){install.packages("satellite")}
if(!require(CARBayes)){install.packages("CARBayes")}
if(!require(mclust)){install.packages("mclust")}
if(!require(leaflet)){install.packages("leaflet")}
if(!require(leaflet.extras)){install.packages("leaflet.extras")}
library(sf) #to read shape files and convert to sf files
library(sp) #to convert sp object
library(spdep) #to create neighborhood matrıx &  For spatial dependencies
library(satellite) #it was neede to download CARBayes package
library(CARBayes)  # For Bayesian model
library(mclust) #for the bivariate mixture model
library(leaflet) #for mapping
library(leaflet.extras)
data1 <- read.csv(file="Data/expected_counts.csv")
head(data1)
data2 <- read.csv(file="Data/respiratory_admissions.csv")
head(data2)
# Check non-matching values between "code" and "IG" variables
non_matching_values <- setdiff(data1$code, data2$IG)
# Print the non-matching values
if(length(non_matching_values) > 0) {
print(non_matching_values)
} else {
print("No non-matching values found.")
}
data <- merge(data1, data2, by.x = "code", by.y = "IG", all = TRUE)
head(data)
shape<-read_sf("SG_IntermediateZoneBdry_2001/")
head(shape, 3)
merged_data <- merge(data, shape, by.x = "code", by.y = "IZ_CODE", all.x = TRUE)
# Set up a 1x2 plotting layout
par(mfrow = c(1, 2))
# Plot the geometry of the shapefile
plot(shape$geometry, main = "Shapefile Geometry")
# Plot the geometry of the merged dataset
plot(merged_data$geometry, main = "Merged Data Geometry")
str(merged_data)
class(merged_data)
# Calculate SMR for 2004
merged_data$SMR_2004 <- (merged_data$Y2004 / merged_data$E2004)
# Calculate SMR for 2005
merged_data$SMR_2005 <- (merged_data$Y2005 / merged_data$E2005)
summary(merged_data)
###add only SMR2004 = smr2005 = EDA and interpretation
###changing color scale
# Simplify the multipolygon to a single polygon
merged_data$geometry <- st_simplify(merged_data$geometry)
# Convert to sf object
sf.dat <- st_as_sf(merged_data)
# Convert to sp object
sp.dat <- as(sf.dat, "Spatial")
# Plot maps
par(mfrow = c(1, 2))
# Plot the map with spatial borders for SMR_2004
plot(sf.dat["SMR_2004"], main = "SMR 2004")
# Plot the map with spatial borders for SMR_2005
plot(sf.dat["SMR_2005"], main = "SMR 2005" , col = color_palette)
# Create neighborhood matrix
W.nb <- poly2nb(sf.dat$geometry, row.names = rownames(sp.dat))
W <- nb2mat(W.nb, style = "B")
W.list <- nb2listw(W.nb, style = "B")
# Moran's I for SMR in 2004
moran_I_2004 <- moran.test(sf.dat$SMR_2004, W.list)
print("Moran's I for SMR in 2004:")
print(moran_I_2004)
# Moran's I for SMR in 2005
moran_I_2005 <- moran.test(sf.dat$SMR_2005, W.list)
print("Moran's I for SMR in 2005:")
print(moran_I_2005)
# Setting the regression formula/equation
formula1 <- Y2004 ~ offset(log(E2004))
# Fit using MLE/glm
model1 <- glm(formula = formula1, family = "poisson", data = sp.dat)
# Summary of the model
summary(model1)
# Check the relative risks
exp(cbind(model1$coefficients, confint(model1)))
# Residual diagnostics - normality and constant variance
par(mfrow = c(1, 2))
qqnorm(residuals(model1, type = "pearson"), main = "", pch = 19)
qqline(residuals(model1, type = "pearson"), col = "red")
plot(model1$fitted.values, residuals(model1, type = "pearson"), pch = 19,
xlab = "Fitted values", ylab = "Residuals")
# Residual diagnostics - correlation
# Replace W.list with our actual spatial weights matrix.
moran.mc(x = residuals(model1, type = "pearson"), listw = W.list, nsim = 10000)
# Setting the regression formula/equation for model2
formula2 <- Y2005 ~ offset(log(E2005))
# Fit using MLE/glm for model2
model2 <- glm(formula = formula2, family = "poisson", data = merged_data)
# Summary of model2
summary(model2)
# Check the relative risks for model2
exp(cbind(model2$coefficients, confint(model2)))
# Residual diagnostics - normality and constant variance for model2
par(mfrow = c(1, 2))
qqnorm(residuals(model2, type = "pearson"), main = "", pch = 19)
qqline(residuals(model2, type = "pearson"), col = "red")
plot(model2$fitted.values, residuals(model2, type = "pearson"), pch = 19,
xlab = "Fitted values", ylab = "Residuals")
# Residual diagnostics - correlation for model2
# Replace W.list with our actual spatial weights matrix.
moran.mc(x = residuals(model2, type = "pearson"), listw = W.list, nsim = 10000)
# Fitting the spatial correlation model for 2004
model_2004 <- S.CARleroux(formula = formula1, family = "poisson", data = sf.dat, W = W,
burnin = 10000, n.sample = 100000, thin = 10, verbose = FALSE)
# Print model and summary of the model for 2004
print(model_2004)
summary(model_2004)
# Check convergence for 2004
plot(model_2004$samples$rho)
# Assess goodness of fit for 2004
moran.mc(x = residuals(model_2004, type = "pearson"), listw = W.list, nsim = 10000)
# Inference from the model for 2004
# Estimated relative risks and 95% credible intervals
exp(model_2004$summary.results[, c("Mean", "2.5%", "97.5%")])
# Calculate and map risk for 2004
sp.dat@data$risk_2004 <- model_2004$fitted.values / sp.dat@data$E2004
colours_risk_2004 <- colorNumeric(palette = "YlOrRd", domain = sp.dat@data$risk_2004)
leaflet(data = sp.dat) %>%
addTiles() %>%
addPolygons(fillColor = ~colours_risk_2004(risk_2004),
color = "", weight = 1,
fillOpacity = 0.7) %>%
addLegend(pal = colours_risk_2004, values = sp.dat@data$risk_2004,
opacity = 1, title = "Risk 2004") %>%
addScaleBar(position = "bottomleft")
# Calculate and map Posterior Exceedance Probability (PEP) for 2004
m <- nrow(model_2004$samples$fitted)
risk_2004 <- model_2004$samples$fitted / matrix(rep(sp.dat@data$E2004, nrow(model_2004$samples$fitted)), nrow = m, byrow = TRUE)
summarise.exceedences<-function(samples,exceedences)
{
exceed.vec<-apply((samples>exceedences),2,sum)/nrow(samples)
9
return(exceed.vec)
}
sp.dat@data$PEP_2004 <- as.numeric(summarise.exceedences(risk_2004, 1))
colours_pep_2004 <- colorNumeric(palette = "YlOrRd", domain = sp.dat@data$PEP_2004)
leaflet(data = sp.dat) %>%
addTiles() %>%
addPolygons(fillColor = ~colours_pep_2004(PEP_2004),
color = "black", weight = 1,
fillOpacity = 0.7) %>%
addLegend(pal = colours_pep_2004, values = sp.dat@data$PEP_2004,
opacity = 1, title = "PEP 2004") %>%
addScaleBar(position = "bottomleft")
###changing color scale
# Simplify the multipolygon to a single polygon
merged_data$geometry <- st_simplify(merged_data$geometry)
# Convert to sf object
sf.dat <- st_as_sf(merged_data)
# Convert to sp object
sp.dat <- as(sf.dat, "Spatial")
# Plot maps
par(mfrow = c(1, 2))
# Plot the map with spatial borders for SMR_2004
plot(sf.dat["SMR_2004"], main = "SMR 2004")
# Plot the map with spatial borders for SMR_2005
plot(sf.dat["SMR_2005"], main = "SMR 2005")
###changing color scale
# Simplify the multipolygon to a single polygon
merged_data$geometry <- st_simplify(merged_data$geometry)
# Convert to sf object
sf.dat <- st_as_sf(merged_data)
# Convert to sp object
sp.dat <- as(sf.dat, "Spatial")
# Plot maps
par(mfrow = c(1, 2))
# Plot the map with spatial borders for SMR_2004
plot(sf.dat["SMR_2004"], main = "SMR 2004")
# Plot the map with spatial borders for SMR_2005
plot(sf.dat["SMR_2005"], main = "SMR 2005")
# Create neighborhood matrix
W.nb <- poly2nb(sf.dat$geometry, row.names = rownames(sp.dat))
W <- nb2mat(W.nb, style = "B")
W.list <- nb2listw(W.nb, style = "B")
# Moran's I for SMR in 2004
moran_I_2004 <- moran.test(sf.dat$SMR_2004, W.list)
print("Moran's I for SMR in 2004:")
print(moran_I_2004)
# Moran's I for SMR in 2005
moran_I_2005 <- moran.test(sf.dat$SMR_2005, W.list)
print("Moran's I for SMR in 2005:")
print(moran_I_2005)
library(RColorBrewer)
ggplot(data = sf.dat, aes(x=long, y=lat, goup=group, fill = c(SMR_2004))) +
geom_polygon() +
coord_equal() +
xlab("Easting (m)") +
ylab("Northing (m)") +
labs(title = "SMR for respiratory hospitalisation", fill = "SMR") +
theme(title = element_text(size=16)) +
scale_fill_gradientn(colors=brewer.pal(n=9, name="YlOrRd"))
library(RColorBrewer)
library(ggplot)
library(RColorBrewer)
library(tidyr)
ggplot(data = sf.dat, aes(x=long, y=lat, goup=group, fill = c(SMR_2004))) +
geom_polygon() +
coord_equal() +
xlab("Easting (m)") +
ylab("Northing (m)") +
labs(title = "SMR for respiratory hospitalisation", fill = "SMR") +
theme(title = element_text(size=16)) +
scale_fill_gradientn(colors=brewer.pal(n=9, name="YlOrRd"))
library(RColorBrewer)
library(tidy)
library(RColorBrewer)
library(ggplot2)
ggplot(data = sf.dat, aes(x=long, y=lat, goup=group, fill = c(SMR_2004))) +
geom_polygon() +
coord_equal() +
xlab("Easting (m)") +
ylab("Northing (m)") +
labs(title = "SMR for respiratory hospitalisation", fill = "SMR") +
theme(title = element_text(size=16)) +
scale_fill_gradientn(colors=brewer.pal(n=9, name="YlOrRd"))
library(RColorBrewer)
library(ggplot2)
ggplot(data = sf.dat, aes( goup=group, fill = c(SMR_2004))) +
geom_polygon() +
coord_equal() +
xlab("Easting (m)") +
ylab("Northing (m)") +
labs(title = "SMR for respiratory hospitalisation", fill = "SMR") +
theme(title = element_text(size=16)) +
scale_fill_gradientn(colors=brewer.pal(n=9, name="YlOrRd"))
library(RColorBrewer)
library(ggplot2)
ggplot(data = sf.dat, aes(  fill = c(SMR_2004))) +
geom_polygon() +
coord_equal() +
xlab("Easting (m)") +
ylab("Northing (m)") +
labs(title = "SMR for respiratory hospitalisation", fill = "SMR") +
theme(title = element_text(size=16)) +
scale_fill_gradientn(colors=brewer.pal(n=9, name="YlOrRd"))
str(merged_data)
library(RColorBrewer)
library(ggplot2)
ggplot(data = sf.dat, aes(x = geometry)) +
geom_sf(aes(fill = SMR_2004)) +
coord_sf() +
xlab("Easting (m)") +
ylab("Northing (m)") +
labs(title = "SMR for respiratory hospitalisation", fill = "SMR") +
theme_minimal() +  # You can customize the theme as needed
theme(title = element_text(size = 16)) +
scale_fill_gradientn(colors = brewer.pal(n = 9, name = "YlOrRd"))
library(RColorBrewer)
library(ggplot2)
library(viridis)  # For the viridis color palette
ggplot(data = sf.dat, aes(x = geometry)) +
geom_sf(aes(fill = SMR_2004)) +
coord_sf() +
xlab("Easting (m)") +
ylab("Northing (m)") +
labs(title = "SMR for respiratory hospitalisation", fill = "SMR") +
theme_minimal() +
theme(title = element_text(size = 16)) +
scale_fill_viridis_c(option = "YlOrRd")  # Using viridis color palette
library(RColorBrewer)
library(ggplot2)
install.packages("viridisLite")
library(viridis)  # For the viridis color palette
ggplot(data = sf.dat, aes(x = geometry)) +
geom_sf(aes(fill = SMR_2004)) +
coord_sf() +
xlab("Easting (m)") +
ylab("Northing (m)") +
labs(title = "SMR for respiratory hospitalisation", fill = "SMR") +
theme_minimal() +
theme(title = element_text(size = 16)) +
scale_fill_viridis_c(option = "YlOrRd")  # Using viridis color palette
